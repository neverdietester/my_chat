// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingProgram.Infrastructure.PostgresIdentity;

#nullable disable

namespace TrainingProgram.Infrastructure.PostgresIdentity.Migrations
{
    [DbContext(typeof(DbContextPostgress))]
    [Migration("20241106142037_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingProgram.Entities.EntityRequest.EntityRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approve")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserMame")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userIdId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("userIdId");

                    b.ToTable("EntityRequest");
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            role = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            role = "User"
                        },
                        new
                        {
                            Id = 4,
                            role = "CreatorUser"
                        });
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.RoleUsers", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = new Guid("1e7249c5-f15e-4f2d-a71a-95e06a5390ea"),
                            Id = 0
                        });
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BanUser")
                        .HasColumnType("boolean");

                    b.Property<string>("DescriptionBlock")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e7249c5-f15e-4f2d-a71a-95e06a5390ea"),
                            BanUser = false,
                            Email = "headshot@mail.ru",
                            FirstName = "Admin",
                            IsEmailConfirmed = false,
                            LastName = "Admin",
                            Login = "Admin",
                            Password = "FeKw08M4keuw8e9gnsQZQgwg4yDOlMZfvIwzEkSOsiU="
                        });
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserToken");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dbd71b4-b9d6-4518-8013-50528af62a23"),
                            RefreshToken = "waedaweqw321wedqw",
                            RefreshTokenExpireTime = new DateTime(2024, 12, 7, 14, 20, 37, 554, DateTimeKind.Utc).AddTicks(7794),
                            UserId = new Guid("1e7249c5-f15e-4f2d-a71a-95e06a5390ea")
                        });
                });

            modelBuilder.Entity("TrainingProgram.Entities.EntityRequest.EntityRequest", b =>
                {
                    b.HasOne("TrainingProgram.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingProgram.Entities.UserEntity.User", "userId")
                        .WithMany()
                        .HasForeignKey("userIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userId");
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.RoleUsers", b =>
                {
                    b.HasOne("TrainingProgram.Entities.UserEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingProgram.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.UserToken", b =>
                {
                    b.HasOne("TrainingProgram.Entities.UserEntity.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("TrainingProgram.Entities.UserEntity.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingProgram.Entities.UserEntity.User", b =>
                {
                    b.Navigation("UserToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
